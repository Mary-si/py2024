Index: homework14_calculator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"homework 14\"\"\"\n\n# Напишите программу - инженерный калькулятор.\n# Передусмотрите возможные ошибки и обработайте их. ~ - это предложение ввода.\n#\n# Базовые требования:\n# Программа считает простые математические выражения:\n# ~ 5 + 4 9\n#\n# Программа ожидает от пользователя ввода математического выражения\n# и правильно его трактует:\n# ~ 10 - 3 + 1 8 ~ 2 ** 3 - 1 7\n\n\nimport ast\n\n\ndef calculator(expression):\n    \"\"\"калькулятор\"\"\"\n    try:\n        a = ast.parse(expression, mode=\"eval\")\n        result = eval(compile(a, filename=\"\", mode=\"eval\"))\n    except Exception as b:\n        return f\"Ошибка при вычислении: {b}\"\n    return result\n\n\nEXPRESSION_1 = \"5 + 49\"\nEXPRESSION_2 = \"10 - 3 + 18\"\nEXPRESSION_3 = \"2 ** 3 - 17\"\n\n# проверка\nresult_1 = calculator(EXPRESSION_1)\nresult_2 = calculator(EXPRESSION_2)\nresult_3 = calculator(EXPRESSION_3)\n\nprint(f\"Результат ({EXPRESSION_1}) = {result_1}\")\nprint(f\"Результат ({EXPRESSION_2}) = {result_2}\")\nprint(f\"Результат ({EXPRESSION_3}) = {result_3}\")\n
===================================================================
diff --git a/homework14_calculator.py b/homework14_calculator.py
--- a/homework14_calculator.py	
+++ b/homework14_calculator.py	
@@ -12,28 +12,56 @@
 # ~ 10 - 3 + 1 8 ~ 2 ** 3 - 1 7
 
 
+# def calculator(expression):
+#     """калькулятор"""
+#     try:
+#         result = eval(expression)
+#     except Exception as e:
+#         return f"Ошибка при вычислении: {e}"
+#     return result
+
+
+# EXPRESSION_1 = "5 + 49"
+# EXPRESSION_2 = "10 - 3 + 18"
+# EXPRESSION_3 = "2 ** 3 - 17"
+#
+# # проверка
+# result_1 = calculator(EXPRESSION_1)
+# result_2 = calculator(EXPRESSION_2)
+# result_3 = calculator(EXPRESSION_3)
+#
+# print(f"Результат ({EXPRESSION_1}) = {result_1}")
+# print(f"Результат ({EXPRESSION_2}) = {result_2}")
+# print(f"Результат ({EXPRESSION_3}) = {result_3}")
+
+
+
 import ast
+import operator as op
 
+# Поддерживаемые операторы
+operators = {
+    ast.Add: op.add,
+    ast.Sub: op.sub,
+    ast.Mult: op.mul,
+    ast.Div: op.truediv,
+    ast.Pow: op.pow,
+    ast.BitXor: op.xor,
+}
 
-def calculator(expression):
-    """калькулятор"""
-    try:
-        a = ast.parse(expression, mode="eval")
-        result = eval(compile(a, filename="", mode="eval"))
-    except Exception as b:
-        return f"Ошибка при вычислении: {b}"
-    return result
 
+def eval_expr(expr):
+   """действия"""
+    def eval_(node):
+        if isinstance(node, ast.Num):  # <number>
+            return node.n
+        elif isinstance(node, ast.BinOp):  # <left> <operator> <right>
+            return operators[type(node.op)](eval_(node.left eval_(node.right))
+        else:
+            raise TypeError(node)
+    return eval_(ast.parse(expr, mode='eval').body)
 
-EXPRESSION_1 = "5 + 49"
-EXPRESSION_2 = "10 - 3 + 18"
-EXPRESSION_3 = "2 ** 3 - 17"
 
-# проверка
-result_1 = calculator(EXPRESSION_1)
-result_2 = calculator(EXPRESSION_2)
-result_3 = calculator(EXPRESSION_3)
+# Использование функции
+print(eval_expr("10 - 3 + 18"))
 
-print(f"Результат ({EXPRESSION_1}) = {result_1}")
-print(f"Результат ({EXPRESSION_2}) = {result_2}")
-print(f"Результат ({EXPRESSION_3}) = {result_3}")
