Index: homework11_bank_deposit.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"homework11\"\"\"\n\n# Создайте класс вклад. Который содержит необходимые поля и методы,\n# например сумма вклада и его срок.\n#\n# Пользователь делает вклад в размере N рублей сроком на R лет под 10% годовых\n# (вклад с возможностью ежемесячной капитализации - это означает,\n# что проценты прибавляются к сумме вклада ежемесячно).\n#\n# Написать класс Bank, метод deposit принимает аргументы N и R,\n# и возвращает сумму, которая будет на счету пользователя.\n#\n# https://myfin.by/wiki/term/kapitalizaciya-procentov\n\n\nclass Deposit:  # pylint: disable=too-few-public-methods\n    \"\"\"Инфорация депозитов\"\"\"\n    # создаем методы класса\n    def __init__(self, deposit_start_date, end_date_deposit):\n        self.deposit_start_date = deposit_start_date\n        self.end_date_deposit = end_date_deposit\n\n\ndeposit_1 = Deposit(\"08.09.2021\", \"08.09.2025\")\ndeposit_2 = Deposit(\"02.03.2022\", \"02.03.2025\")\ndeposit_3 = Deposit(\"01.01.2025\", \"31.12.2025\")\n\n\nclass Bank:  # pylint: disable=too-few-public-methods\n    \"\"\"Инфорация о договорах пользователя\"\"\"\n    def __init__(self, deposit_amount, deposit_term_year, percent_deposit):\n        self.deposit_amount = deposit_amount\n        self.deposit_term_year = deposit_term_year\n        self.percent_deposit = percent_deposit\n\n    def calculate(self):\n        \"\"\"калькулятор \"\"\"\n        for _ in range(self.deposit_term_year * 12):\n            self.deposit_amount += (self.deposit_amount *\n                                    (self.percent_deposit / 12))\n        return self.deposit_amount\n\n\nuser_1 = Bank(20000, 4, 0.05)\nuser_2 = Bank(5000, 3, 0.03)\nuser_3 = Bank(2000, 1, 0.01)\n\n# Проверка\nfinal_amount_user_1 = user_1.calculate()\nprint(f\"Сумма на счету у пользователя {user_1.deposit_term_year} лет,\"\n      f\"будет {final_amount_user_1:.2f} рублей\")\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework11_bank_deposit.py b/homework11_bank_deposit.py
--- a/homework11_bank_deposit.py	
+++ b/homework11_bank_deposit.py	
@@ -13,6 +13,7 @@
 # https://myfin.by/wiki/term/kapitalizaciya-procentov
 
 
+
 class Deposit:  # pylint: disable=too-few-public-methods
     """Инфорация депозитов"""
     # создаем методы класса
Index: homework12_cards.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework12_cards.py b/homework12_cards.py
new file mode 100644
--- /dev/null	
+++ b/homework12_cards.py	
@@ -0,0 +1,50 @@
+"""homework12"""
+
+# Колода карт
+# Напишите программу которая содержит список карт,
+# умеет их перемешивать и позволяет пользователю достать карту из колоды по ее номеру.
+# Всего в колоде 54 карты.
+# Класс Card содержит спискок номеров карт и список мастей.
+
+
+from random import shuffle
+
+class Card:
+    number_list = [2, 3, 4, 5, 6, 7, 8, 9, 10, "JOKER", "A", "K", "Q", "J"]
+    mast_list = ["Clubs", "Diamonds", "Hearts", "Spades"]
+
+    def __init__(self, number, mast):
+        self.number = number
+        self.mast = mast
+
+    def __str__(self):
+        return f"{self.number} of {self.mast}"
+
+class CardsDeck:
+    def __init__(self):
+        self.card = [Card(number, mast) for mast in Card.mast_list for number in Card.number_list]
+        self.card.extend([Card("JOKER", None), Card("JOKER", None)])
+
+
+    def shuffle(self):
+        shuffle(self.card)
+
+
+    def get(self, card_number):
+        if 2 <= card_number <= 54:
+            return self.card[card_number -1]
+
+
+deck = CardsDeck()
+deck.shuffle()
+
+
+card_number = int(input('Выберите карту из колоды в 54 карт:'))
+card = deck.get(card_number)
+print(f'You card is: {card}')
+#>> Hearts 10
+
+card_number = int(input('Выберите карту из колоды в 54 карт:'))
+card = deck.get(card_number)
+print(f'You card is: {card}')
+#>> Diamonds 6
Index: homework12_converter.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/homework12_converter.py b/homework12_converter.py
new file mode 100644
--- /dev/null	
+++ b/homework12_converter.py	
@@ -0,0 +1,56 @@
+"""homework12"""
+
+# Конвертер валют
+# Расширьте функционал класса Bank из домашней работы
+# #11. Добавьте новый класс Currency,
+# # который умеет конвертировать различные валюты (USD, EUR, ...) в заданную валюту.
+
+bank = Bank(..)
+
+vasya = Person('USD', 10)
+petya = Person('EUR', 5)
+
+class Deposit:  # pylint: disable=too-few-public-methods
+    """Инфорация депозитов"""
+    # создаем методы класса
+    def __init__(self, deposit_start_date, end_date_deposit):
+        self.deposit_start_date = deposit_start_date
+        self.end_date_deposit = end_date_deposit
+
+
+deposit_1 = Deposit("08.09.2021", "08.09.2025")
+deposit_2 = Deposit("02.03.2022", "02.03.2025")
+deposit_3 = Deposit("01.01.2025", "31.12.2025")
+
+
+class Bank:  # pylint: disable=too-few-public-methods
+    """Инфорация о договорах пользователя"""
+    def __init__(self, deposit_amount, deposit_term_year, percent_deposit):
+        self.deposit_amount = deposit_amount
+        self.deposit_term_year = deposit_term_year
+        self.percent_deposit = percent_deposit
+
+    def calculate(self):
+        """калькулятор """
+        for _ in range(self.deposit_term_year * 12):
+            self.deposit_amount += (self.deposit_amount *
+                                    (self.percent_deposit / 12))
+        return self.deposit_amount
+
+
+user_1 = Bank(20000, 4, 0.05)
+user_2 = Bank(5000, 3, 0.03)
+user_3 = Bank(2000, 1, 0.01)
+
+class Currency:
+    """Конвертация"""
+
+
+
+# Если валюта не задана, то конвертация происходит в BYN:
+assert bank.exchange_currency(vasya.currency, vasya.amount) == (32.69, "BYN"), <error message>
+assert bank.exchange_currency(petya.currency, petya.amount) == (35.20, "BYN"), <error message>
+
+# Конвертация в заданную валюту BYN:
+assert bank.exchange_currency(vasya.currency, vasya.amount, 'EUR') == (9.29, "EUR"), <error message>
+assert bank.exchange_currency(petya.currency, petya.amount, 'USD') == (10.76, "USD"), <error message>
